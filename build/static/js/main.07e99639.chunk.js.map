{"version":3,"sources":["components/NewPost.jsx","components/Post.jsx","components/Profile.jsx","components/DisplayAllPosts.jsx","App.js","reportWebVitals.js","index.js"],"names":["NewPost","props","className","onSubmit","savePost","onChange","saveContentState","placeholder","rows","cols","ref","getContent","disabled","content","length","Post","date","userName","onClick","deletePost","id","Profile","saveProfile","setProfileState","getProfile","DisplayAllPosts","useState","setContent","allPosts","setAllPosts","isCreateNewPost","setIsCreateNewPost","profile","setProfile","isCreateNewProfile","setIsCreateNewProfile","error","setError","useRef","URL","useEffect","getTweets","a","fetch","response","ok","message","status","Error","json","data","tweets","reverse","setInterval","pushingTweets","newTweets","lastTweet","slice","method","body","JSON","stringify","headers","Accept","result","push","toggleCreateNewPost","modifiedPost","filter","eachPost","event","target","value","preventDefault","map","newPost","Date","toISOString","current","App","color","type","bg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07e99639.chunk.js","sourcesContent":["import React from \"react\";\n\nconst NewPost = (props) => {\n  return (\n    <>\n      <form className=\"form-group main\" onSubmit={props.savePost}>\n        <h2>Tweek Bout 'It</h2>\n        <textarea\n          onChange={props.saveContentState}\n          placeholder=\"Blog your heart out\"\n          rows=\"8\"\n          cols=\"41\"\n          ref={props.getContent}\n        ></textarea>\n        <br />\n        <button disabled={props.content.length > 140} className=\"btn btn-dark\">\n          Tweek It\n        </button>\n      </form>\n    </>\n  );\n};\nexport default NewPost;\n","import React from \"react\";\n\nconst Post = (props) => {\n  return (\n    <>\n      <section className=\"tweet\">\n        <h3>{props.content}</h3>\n        <p>{props.date}</p>\n        <p>{props.userName}</p>\n        <button className=\"btn btn-danger delete\" onClick={() => props.deletePost(props.id)}>Delete</button>\n      </section>\n    </>\n  );\n};\nexport default Post;\n","import React from \"react\";\n\nconst Profile = (props) => {\n  return (\n    <>\n      <form className=\"form-group main\" onSubmit={props.saveProfile}>\n        <h2>What's the name bub?</h2>\n        <input\n          onChange={props.setProfileState}\n          placeholder=\"Slim Jim\"\n          ref={props.getProfile}\n        ></input>\n        <br />\n        <br />\n        <button className=\"btn btn-dark\">Get Tweekin'</button>\n      </form>\n    </>\n  );\n};\n\nexport default Profile;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport NewPost from \"./NewPost\";\nimport Post from \"./Post\";\nimport Profile from \"./Profile\";\n\nconst DisplayAllPosts = () => {\n  const [content, setContent] = useState(\"\");\n  const [allPosts, setAllPosts] = useState([]);\n  const [isCreateNewPost, setIsCreateNewPost] = useState(false);\n  const [profile, setProfile] = useState(\"\");\n  const [isCreateNewProfile, setIsCreateNewProfile] = useState(true);\n  const [error, setError] = useState(false);\n  // initialize useRef\n  const getContent = useRef();\n  const getProfile = useRef();\n\n  // -------------------Fetches\n  const URL =\n    \"https://micro-blogging-dot-full-stack-course-services.ew.r.appspot.com/tweet\";\n\n  // -------Get\n  useEffect(() => {\n    const getTweets = async () => {\n      const response = await fetch(URL);\n      if (!response.ok) {\n        const message = `An error has occurred: ${response.status}`;\n        throw new Error(message);\n      }\n      const data = await response.json();\n      setAllPosts(data.tweets.reverse());\n    };\n    setInterval(() => {\n      getTweets();\n    }, 10000);\n  }, []);\n\n  const pushingTweets = async (newTweets) => {\n    setAllPosts(newTweets);\n    let lastTweet = newTweets.slice(-1)[0];\n    const result = await fetch(URL, {\n      method: \"POST\",\n      body: JSON.stringify(lastTweet),\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    if (!result.ok) {\n      setError(!error);\n      throw new Error(`An error has occurred: ${result.status}`);\n    }\n    const response = await result.json();\n    allPosts.push(response);\n  };\n\n  // -------------------Functionality\n  const setProfileState = (event) => {\n    setProfile(event.target.value);\n  };\n  const toggleCreateNewProfile = () => {\n    setIsCreateNewProfile(!isCreateNewProfile);\n  };\n\n  const saveContentState = (event) => {\n    setContent(event.target.value);\n  };\n\n  const toggleCreateNewPost = () => {\n    setIsCreateNewPost(!isCreateNewPost);\n  };\n\n  const saveProfile = (event) => {\n    event.preventDefault();\n    setProfile(profile);\n    toggleCreateNewProfile();\n  };\n\n  const savePost = (event) => {\n    event.preventDefault();\n    const newPost = {};\n    newPost.content = content;\n    newPost.userName = profile;\n    newPost.date = new Date().toISOString();\n    pushingTweets([...allPosts, newPost]);\n    getContent.current.value = \"\";\n    toggleCreateNewPost();\n  };\n\n  const deletePost = (id) => {\n    const modifiedPost = allPosts.filter((eachPost) => {\n      return eachPost.id !== id;\n    });\n    setAllPosts(modifiedPost);\n  };\n\n  // -------------------Conditional Renders\n  if (isCreateNewProfile) {\n    return (\n      <>\n        <Profile\n          setProfileState={setProfileState}\n          profile={profile}\n          setProfile={setProfile}\n          getProfile={getProfile}\n          saveProfile={saveProfile}\n        />\n      </>\n    );\n  }\n\n  if (!isCreateNewPost) {\n    return (\n      <>\n        <NewPost\n          saveContentState={saveContentState}\n          getContent={getContent}\n          savePost={savePost}\n          content={content}\n        />\n      </>\n    );\n  }\n\n  // -------------------Standard Renders\n  return (\n    <>\n      <div className=\"main\">\n        <h2 className=\"allTweeks\">Tweeker</h2>\n        <button className=\"btn btn-dark button\" onClick={toggleCreateNewPost}>\n          Tweek Yo self\n        </button>\n        {!allPosts.length ? (\n          <div>\n            <h3>No Tweeks to Display</h3>\n          </div>\n        ) : (\n          allPosts\n            .slice(0)\n            .reverse()\n            .map((eachPost) => {\n              return (\n                <>\n                  <Post\n                    id={eachPost.id}\n                    key={eachPost.id}\n                    content={eachPost.content}\n                    date={eachPost.date}\n                    userName={eachPost.userName}\n                    deletePost={deletePost}\n                  />\n                </>\n              );\n            })\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default DisplayAllPosts;\n","import \"./App.css\";\nimport DisplayAllPosts from \"./components/DisplayAllPosts\";\nimport ParticlesBg from \"particles-bg\";\n\nfunction App() {\n  return (\n    <div>\n      <div className=\"App\">\n        <DisplayAllPosts />\n        <ParticlesBg color=\"#1ea1f0\" type=\"lines\" bg={true} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}